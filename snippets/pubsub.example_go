package main

import (
	"fmt"
	"sync"
	"time"
)

type Subscriber2 chan interface{}

type PubSub struct {
	// this is an idiomatic way in golang to create a set
	// map[]struct{} creates a set, not a map.
	// assigning an empty struct act as placeholders and occupies 0 bytes

	subscribers map[Subscriber2]struct{}
	mu          sync.Mutex
	wg          sync.WaitGroup
}

func NewPubSub() *PubSub {
	return &PubSub{
		subscribers: make(map[Subscriber2]struct{}),
	}
}

func (p *PubSub) Subscribe() Subscriber2 {
	sub := make(Subscriber2, 10)
	p.mu.Lock()
	p.subscribers[sub] = struct{}{}
	p.mu.Unlock()
	return sub
}

func (p *PubSub) Unsubscribe(sub Subscriber2) {
	p.mu.Lock()
	delete(p.subscribers, sub)
	p.mu.Unlock()
}

func (p *PubSub) Publish(v interface{}) {
	p.mu.Lock()
	for sub := range p.subscribers {
		p.wg.Add(1)
		go func(ch Subscriber2, value interface{}) {
			defer p.wg.Done()
			ch <- value
		}(sub, v)
	}
	p.mu.Unlock()
	p.wg.Wait()
}

func main() {
	pubsub := NewPubSub()

	sub1 := pubsub.Subscribe()
	sub2 := pubsub.Subscribe()

	go func() {
		for msg := range sub1 {
			fmt.Println("Subscriber2 1 received:", msg)
		}
	}()

	go func() {
		for msg := range sub2 {
			fmt.Println("Subscriber2 2 received:", msg)
		}
	}()
	pubsub.Publish("Hello")
	pubsub.Publish("World")

	time.Sleep(time.Second)
	pubsub.Unsubscribe(sub1)
	time.Sleep(time.Second)
	pubsub.Publish("Goodbye")
	time.Sleep(time.Second)
}
